# 無料枠最適化 Next.js Dockerfile
# メモリ使用量とビルド時間を最小化

FROM node:18-alpine AS base

# 依存関係のインストール
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# 無料枠でのビルド時間短縮のため、package.jsonのみ先にコピー
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# ビルドステージ
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# 無料枠制限を考慮した環境変数
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_OPTIONS="--max-old-space-size=512"

# ビルド実行
RUN npm run build

# プロダクションステージ
FROM base AS runner
WORKDIR /app

# 無料枠セキュリティ設定
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# 必要なファイルのみコピー (容量削減)
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# 無料枠用の軽量化
USER nextjs

EXPOSE 3000

# 無料枠制限対応の環境変数
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# ヘルスチェック (無料枠監視用)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# アプリケーション起動
CMD ["node", "server.js"] 